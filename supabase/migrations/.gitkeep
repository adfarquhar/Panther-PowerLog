-- Helper function to update 'updated_at' column
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- MUSCLE GROUPS Table (Global and User-Specific)
CREATE TABLE public.muscle_groups (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE, -- Nullable for global groups
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT muscle_groups_name_user_id_key UNIQUE (name, user_id), -- User cannot have duplicate muscle group names
  CONSTRAINT muscle_groups_name_global_key CHECK (user_id IS NOT NULL OR (user_id IS NULL AND name IS NOT NULL)) -- For unique global names, though this is trickier with just CHECK. Better to enforce unique global names at application level or with a more complex trigger if truly needed or ensure user_id is always null for global ones. For now, the unique constraint `muscle_groups_name_user_id_key` will cover user-specific uniqueness. A simple UNIQUE(name) would prevent a user from creating a custom group if a global one with the same name exists. This setup allows a user to have a custom "Chest" even if a global "Chest" exists.
);
COMMENT ON COLUMN public.muscle_groups.user_id IS 'Null for global/preset groups, set for user-defined groups.';
ALTER TABLE public.muscle_groups ENABLE ROW LEVEL SECURITY;
CREATE TRIGGER on_muscle_groups_updated
  BEFORE UPDATE ON public.muscle_groups
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- EXERCISES Table (Global and User-Specific)
CREATE TABLE public.exercises (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  muscle_group_id UUID REFERENCES public.muscle_groups(id) ON DELETE SET NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE, -- Nullable for global exercises
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT exercises_name_user_id_key UNIQUE (name, user_id) -- User cannot have duplicate exercise names
  -- Similar constraint considerations as muscle_groups for global uniqueness
);
COMMENT ON COLUMN public.exercises.user_id IS 'Null for global/preset exercises, set for user-defined exercises.';
ALTER TABLE public.exercises ENABLE ROW LEVEL SECURITY;
CREATE TRIGGER on_exercises_updated
  BEFORE UPDATE ON public.exercises
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- WORKOUT SESSIONS Table (User-Specific)
CREATE TABLE public.workout_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  name TEXT,
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
ALTER TABLE public.workout_sessions ENABLE ROW LEVEL SECURITY;
CREATE TRIGGER on_workout_sessions_updated
  BEFORE UPDATE ON public.workout_sessions
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();

-- WORKOUT EXERCISES Table (User-Specific, links session to an exercise)
CREATE TABLE public.workout_exercises (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  workout_session_id UUID NOT NULL REFERENCES public.workout_sessions(id) ON DELETE CASCADE,
  exercise_id UUID NOT NULL REFERENCES public.exercises(id) ON DELETE RESTRICT, -- Prevent deleting an exercise if it's part of a workout
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, -- Denormalized for easier RLS and queries
  "order" INTEGER,
  notes TEXT,
  total_volume NUMERIC,
  is_pr_volume_at_logging BOOLEAN DEFAULT FALSE,
  is_pr_weight_at_logging BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
ALTER TABLE public.workout_exercises ENABLE ROW LEVEL SECURITY;
CREATE TRIGGER on_workout_exercises_updated
  BEFORE UPDATE ON public.workout_exercises
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();
CREATE INDEX idx_workout_exercises_user_id ON public.workout_exercises(user_id);
CREATE INDEX idx_workout_exercises_session_id ON public.workout_exercises(workout_session_id);


-- EXERCISE SETS Table (User-Specific)
CREATE TABLE public.exercise_sets (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  workout_exercise_id UUID NOT NULL REFERENCES public.workout_exercises(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, -- Denormalized for easier RLS and queries
  set_number INTEGER NOT NULL,
  weight NUMERIC NOT NULL DEFAULT 0,
  reps INTEGER NOT NULL DEFAULT 0,
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT positive_weight CHECK (weight >= 0),
  CONSTRAINT positive_reps CHECK (reps >= 0),
  CONSTRAINT positive_set_number CHECK (set_number > 0)
);
ALTER TABLE public.exercise_sets ENABLE ROW LEVEL SECURITY;
CREATE TRIGGER on_exercise_sets_updated
  BEFORE UPDATE ON public.exercise_sets
  FOR EACH ROW EXECUTE PROCEDURE public.handle_updated_at();
CREATE INDEX idx_exercise_sets_user_id ON public.exercise_sets(user_id);
CREATE INDEX idx_exercise_sets_workout_exercise_id ON public.exercise_sets(workout_exercise_id);


-- ROW LEVEL SECURITY (RLS) POLICIES

-- Muscle Groups RLS
CREATE POLICY "Users can view global muscle groups" ON public.muscle_groups
  FOR SELECT USING (user_id IS NULL);
CREATE POLICY "Users can CRUD their own muscle groups" ON public.muscle_groups
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Exercises RLS
CREATE POLICY "Users can view global exercises" ON public.exercises
  FOR SELECT USING (user_id IS NULL);
CREATE POLICY "Users can CRUD their own exercises" ON public.exercises
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Workout Sessions RLS
CREATE POLICY "Users can CRUD their own workout sessions" ON public.workout_sessions
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Workout Exercises RLS
-- Note: user_id is denormalized onto this table for simpler RLS.
-- Ensure this user_id matches the workout_session's user_id through application logic or a trigger if needed.
CREATE POLICY "Users can CRUD their own workout exercises" ON public.workout_exercises
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Exercise Sets RLS
-- Note: user_id is denormalized onto this table for simpler RLS.
CREATE POLICY "Users can CRUD their own exercise sets" ON public.exercise_sets
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Seed some global muscle groups (Optional)
-- You might want to do this via a separate seeding script or manually in Supabase Studio
-- INSERT INTO public.muscle_groups (name) VALUES ('Chest'), ('Back'), ('Shoulders'), ('Legs'), ('Biceps'), ('Triceps'), ('Abs'), ('Full Body'), ('Cardio'), ('Other');

-- Example of seeding a global exercise (Optional)
-- INSERT INTO public.exercises (name, muscle_group_id)
-- SELECT 'Bench Press', mg.id
-- FROM public.muscle_groups mg
-- WHERE mg.name = 'Chest' AND mg.user_id IS NULL;

